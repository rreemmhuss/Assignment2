# -*- coding: utf-8 -*-
"""Programming

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TClGs3KxaHRvk7qhn5F6vRb0ktdEhBVh
"""

from datetime import date
import sys

# ---------------------- Room Class ----------------------
class Room:
    def __init__(self, room_number, room_type, amenities, price_per_night):
        self.__room_number = room_number
        self._room_type = room_type
        self._amenities = amenities
        self._price_per_night = price_per_night
        self._is_available = True

    def check_availability(self):
        return self._is_available

    def update_status(self, status):
        self._is_available = status

    def get_room_number(self):
        return self.__room_number

    def get_room_type(self):
        return self._room_type

    def get_price(self):
        return self._price_per_night

    def __str__(self):
        return f"Room {self.__room_number} ({self._room_type}) - {'Available' if self._is_available else 'Not Available'}"

# ---------------------- Guest Class ----------------------
class Guest:
    def __init__(self, guest_id, name, email, phone, loyalty_status):
        valid_statuses = ["Basic", "Gold"]
        if loyalty_status not in valid_statuses:
            raise ValueError(f"Loyalty status must be one of {valid_statuses}, but got '{loyalty_status}'.")

        self.__guest_id = guest_id
        self._name = name
        self._email = email
        self._phone = phone
        self._loyalty_status = loyalty_status
        self._bookings = []

    def add_booking(self, booking):
        self._bookings.append(booking)

    def get_bookings(self):
        return self._bookings

    def __str__(self):
        return f"Guest {self._name} | Email: {self._email} | Loyalty: {self._loyalty_status}"

# ---------------------- Booking Class ----------------------
class Booking:
    def __init__(self, booking_id, check_in, check_out, room, guest):
        self.__booking_id = booking_id
        self._check_in = check_in
        self._check_out = check_out
        self._room = room
        self._guest = guest
        self._status = "Confirmed"

    def calculate_total(self):
        days = (self._check_out - self._check_in).days
        return days * self._room.get_price()

    def cancel_booking(self):
        self._status = "Cancelled"
        self._room.update_status(True)

    def __str__(self):
        return f"Booking ID: {self.__booking_id}, Room: {self._room.get_room_number()}, Status: {self._status}"

# ---------------------- Invoice Class ----------------------
class Invoice:
    def __init__(self, invoice_id, booking, extra_charges=0.0, discount=0.0):
        self.__invoice_id = invoice_id
        self._total_amount = booking.calculate_total() + extra_charges - discount

    def get_total(self):
        return self._total_amount

    def __str__(self):
        return f"Invoice ID: {self.__invoice_id} | Total: AED {self._total_amount:.2f}"

# ---------------------- Payment Class ----------------------
class Payment:
    def __init__(self, payment_id, method, amount):
        self.__payment_id = payment_id
        self.__method = method
        self.__amount = amount
        self.__status = "Pending"

    def process(self):
        try:
            if self.__amount <= 0:
                raise ValueError("Payment amount must be greater than zero.")
            self.__status = "Completed"
            return True
        except ValueError as ve:
            print(" Payment failed:", ve)
            return False

    def __str__(self):
        return f"Payment ID: {self.__payment_id} | Status: {self.__status}"

# ---------------------- ServiceRequest & Feedback ----------------------
class ServiceRequest:
    def __init__(self, request_id, service_type):
        self.__request_id = request_id
        self._service_type = service_type
        self._status = "Pending"

    def mark_completed(self):
        self._status = "Completed"

    def __str__(self):
        return f"Request {self.__request_id} | {self._service_type} | Status: {self._status}"

class Feedback:
    def __init__(self, feedback_id, rating, comments):
        self.__feedback_id = feedback_id
        self._rating = rating
        self._comments = comments

    def __str__(self):
        return f"Rating: {self._rating}/5 - {self._comments}"

# ---------------------- START PROGRAM ----------------------

print("===== Guest Account Creation Test =====")
try:
    name = input("Enter guest name: ").strip()
    email = input("Enter guest email: ").strip()
    phone = input("Enter phone: ").strip()
    loyalty = input("Enter loyalty status (Basic/Gold): ").strip()
    guest1 = Guest("G001", name, email, phone, loyalty)
    print("âœ…", guest1)
except Exception as e:
    print(" Error creating guest:", e)
    sys.exit()  # Stop execution on error

print("\n===== Room Creation and Search Test =====")
room1 = Room("101", "Double", ["WiFi", "TV", "Mini-bar"], 300.0)
room2 = Room("102", "Single", ["WiFi"], 200.0)
rooms = [room1, room2]

room_type = input("Search room type (Double/Single): ").strip()
found = False
for r in rooms:
    if r.get_room_type() == room_type and r.check_availability():
        print(" Available:", r)
        found = True
if not found:
    print(" No rooms of that type are available.")
    sys.exit()

print("\n===== Making a Reservation Test =====")
try:
    booking = Booking("B001", date(2025, 4, 1), date(2025, 4, 3), room1, guest1)
    guest1.add_booking(booking)
    room1.update_status(False)
    print(" Booking successful:", booking)
except Exception as e:
    print(" Booking failed:", e)
    sys.exit()

print("\n===== Invoice Generation Test =====")
try:
    invoice = Invoice("INV001", booking, extra_charges=50, discount=30)
    print("âœ…", invoice)
except Exception as e:
    print(" Invoice failed:", e)
    sys.exit()

print("\n===== Payment Processing Test =====")
try:
    payment = Payment("P001", "Credit Card", invoice.get_total())
    if payment.process():
        print("", payment)
    else:
        sys.exit()
except Exception as e:
    print("Payment error:", e)
    sys.exit()

print("\n===== Reservation History Test =====")
for b in guest1.get_bookings():
    print("ðŸ“„", b)

print("\n===== Cancel Reservation Test =====")
booking.cancel_booking()
print("Reservation cancelled:", booking)

print("\n===== Feedback and Service Request Test =====")
try:
    feedback = Feedback("F001", 5, "Great stay!")
    service = ServiceRequest("S001", "Housekeeping")
    service.mark_completed()
    print(" Feedback:", feedback)
    print(" Request:", service)
except Exception as e:
    print(" Feedback or request error:", e)
    sys.exit()



from datetime import date
import sys

# ---------------------- Room Class ----------------------
class Room:
    def __init__(self, room_number, room_type, amenities, price_per_night):
        self.__room_number = room_number
        self._room_type = room_type
        self._amenities = amenities
        self._price_per_night = price_per_night
        self._is_available = True

    def check_availability(self):
        return self._is_available

    def update_status(self, status):
        self._is_available = status

    def get_room_number(self):
        return self.__room_number

    def get_room_type(self):
        return self._room_type

    def get_price(self):
        return self._price_per_night

    def __str__(self):
        return f"Room {self.__room_number} ({self._room_type}) - {'Available' if self._is_available else 'Not Available'}"

# ---------------------- Guest Class ----------------------
class Guest:
    def __init__(self, guest_id, name, email, phone, loyalty_status):
        valid_statuses = ["Basic", "Gold"]
        if loyalty_status not in valid_statuses:
            raise ValueError(f"Loyalty status must be one of {valid_statuses}, but got '{loyalty_status}'.")

        self.__guest_id = guest_id
        self._name = name
        self._email = email
        self._phone = phone
        self._loyalty_status = loyalty_status
        self._bookings = []

    def add_booking(self, booking):
        self._bookings.append(booking)

    def get_bookings(self):
        return self._bookings

    def __str__(self):
        return f"Guest {self._name} | Email: {self._email} | Loyalty: {self._loyalty_status}"

# ---------------------- Booking Class ----------------------
class Booking:
    def __init__(self, booking_id, check_in, check_out, room, guest):
        self.__booking_id = booking_id
        self._check_in = check_in
        self._check_out = check_out
        self._room = room
        self._guest = guest
        self._status = "Confirmed"

    def calculate_total(self):
        days = (self._check_out - self._check_in).days
        return days * self._room.get_price()

    def cancel_booking(self):
        self._status = "Cancelled"
        self._room.update_status(True)

    def __str__(self):
        return f"Booking ID: {self.__booking_id}, Room: {self._room.get_room_number()}, Status: {self._status}"

# ---------------------- Invoice Class ----------------------
class Invoice:
    def __init__(self, invoice_id, booking, extra_charges=0.0, discount=0.0):
        self.__invoice_id = invoice_id
        self._total_amount = booking.calculate_total() + extra_charges - discount

    def get_total(self):
        return self._total_amount

    def __str__(self):
        return f"Invoice ID: {self.__invoice_id} | Total: AED {self._total_amount:.2f}"

# ---------------------- Payment Class ----------------------
class Payment:
    def __init__(self, payment_id, method, amount):
        self.__payment_id = payment_id
        self.__method = method
        self.__amount = amount
        self.__status = "Pending"

    def process(self):
        try:
            if self.__amount <= 0:
                raise ValueError("Payment amount must be greater than zero.")
            self.__status = "Completed"
            return True
        except ValueError as ve:
            print(" Payment failed:", ve)
            return False

    def __str__(self):
        return f"Payment ID: {self.__payment_id} | Status: {self.__status}"

# ---------------------- ServiceRequest & Feedback ----------------------
class ServiceRequest:
    def __init__(self, request_id, service_type):
        self.__request_id = request_id
        self._service_type = service_type
        self._status = "Pending"

    def mark_completed(self):
        self._status = "Completed"

    def __str__(self):
        return f"Request {self.__request_id} | {self._service_type} | Status: {self._status}"

class Feedback:
    def __init__(self, feedback_id, rating, comments):
        self.__feedback_id = feedback_id
        self._rating = rating
        self._comments = comments

    def __str__(self):
        return f"Rating: {self._rating}/5 - {self._comments}"

# ---------------------- START PROGRAM ----------------------

print("===== Guest Account Creation Test =====")
try:
    name = input("Enter guest name: ").strip()
    email = input("Enter guest email: ").strip()
    phone = input("Enter phone: ").strip()
    loyalty = input("Enter loyalty status (Basic/Gold): ").strip()
    guest1 = Guest("G001", name, email, phone, loyalty)
    print("âœ…", guest1)
except Exception as e:
    print(" Error creating guest:", e)
    sys.exit()  # Stop execution on error

print("\n===== Room Creation and Search Test =====")
room1 = Room("101", "Double", ["WiFi", "TV", "Mini-bar"], 300.0)
room2 = Room("102", "Single", ["WiFi"], 200.0)
rooms = [room1, room2]

room_type = input("Search room type (Double/Single): ").strip()
found = False
for r in rooms:
    if r.get_room_type() == room_type and r.check_availability():
        print(" Available:", r)
        found = True
if not found:
    print(" No rooms of that type are available.")
    sys.exit()

print("\n===== Making a Reservation Test =====")
try:
    booking = Booking("B001", date(2025, 4, 1), date(2025, 4, 3), room1, guest1)
    guest1.add_booking(booking)
    room1.update_status(False)
    print(" Booking successful:", booking)
except Exception as e:
    print(" Booking failed:", e)
    sys.exit()

print("\n===== Invoice Generation Test =====")
try:
    invoice = Invoice("INV001", booking, extra_charges=50, discount=30)
    print("âœ…", invoice)
except Exception as e:
    print(" Invoice failed:", e)
    sys.exit()

print("\n===== Payment Processing Test =====")
try:
    payment = Payment("P001", "Credit Card", invoice.get_total())
    if payment.process():
        print("", payment)
    else:
        sys.exit()
except Exception as e:
    print("Payment error:", e)
    sys.exit()

print("\n===== Reservation History Test =====")
for b in guest1.get_bookings():
    print("ðŸ“„", b)

print("\n===== Cancel Reservation Test =====")
booking.cancel_booking()
print("Reservation cancelled:", booking)

print("\n===== Feedback and Service Request Test =====")
try:
    feedback = Feedback("F001", 5, "Great stay!")
    service = ServiceRequest("S001", "Housekeeping")
    service.mark_completed()
    print(" Feedback:", feedback)
    print(" Request:", service)
except Exception as e:
    print(" Feedback or request error:", e)
    sys.exit()